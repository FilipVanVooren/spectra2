#!/bin/bash

###############################################################################
# Poor man's xas99.py wrapper
#
# This script is a wrapper for the excellent xas99.py TMS9900 cross-assembler
# included in the xdt99 package (TI 99 Cross-Development Tools) by endlos99.
# 
# You get the xdt99 package here: https://endlos99.github.io/xdt99/
###############################################################################
# Author: Filip van Vooren
###############################################################################
# 14.01.2018    v.0.1     Alpha release
# 30.01.2018    v.0.2     Handle modules
# 04.04.2019    v.0.3     Some bugfixes
# 07.09.2019    v.0.4     Added support for MS Visual Studio Code
# 15.02.2020    v.0.5     Preprocessing on all asm files, not only main file
###############################################################################

#------------------------------------------------------------------------------
# Setup global variables
#------------------------------------------------------------------------------

# Source File
g_source=${1:-test1}                          # Source File
g_spectra2="${2//\//\\\/}"                    # Path to spectra2 directory (escaped slashes)
g_spasm="${3}"                                # Path to spasm directory
g_basename=${g_source%.*}                     # Source File basename
g_suffix=${g_source##*.}                      # Source File extension
g_prepdir=".${g_basename}/${g_basename}.$$"   # Preprocessor directory
g_preproc="$g_prepdir/$g_source.$$"           # Preprocessor source file

# Defaults
g_asmrc=99                                    # xas99 return code
g_binary="${g_basename}.bin"                  # Output filename
g_date="$(date '+%y%m%d-%H%M%S0')"            # Current date & time format 1
g_now="$(date '+%y-%m-%d %H:%M:%S')"          # Current date & time format 2
g_prog="$g_prog ($g_date)"                    # Cartridge title
g_list="${g_basename}.lst.asm"                # Always create list file
g_xas99="${BASH_SOURCE[0]}"                   # This wrapper
g_xas99hdr="${g_prepdir}/xas99run.hdr"        # Header of xas99 assembly run
g_xas99run="${g_prepdir}/xas99run.out"        # Output of xas99 assembly run
g_dest="/media/q0tws01/FINALGROM/tifun"       # Destination for copying resulting binary to



#------------------------------------------------------------------------------
# Function: Assert source file
#------------------------------------------------------------------------------
function assert() {

  if [[ "$g_suffix" == "$g_basename" ]]; then
     g_source="${g_source}.asm"
     g_suffix="asm"
     g_preproc="$g_prepdir/$g_source.$$"      # Preprocessor source file
  fi

  if [[ ! "$g_suffix" =~ a99|asm ]]; then
     echo "Aborting! Unknown source file extension '$g_suffix'"
     exit 99
  fi
  
  if [ ! -e $g_source ]; then
     echo "Aborting! Source file '$g_source' not found/specified."
     exit 99
  fi

  if [[ ${PWD##*/} =~ equates|modules ]]; then
     echo "Aborting! Assembly not supported in project subdirectory."    
     exit 99
  fi

  if [ !  -d "bin" ]; then
     mkdir bin
  fi
}


#------------------------------------------------------------------------------
# Preprocess source code
#------------------------------------------------------------------------------ 
function preproc_source() {
  for i in $(ls ${g_prepdir}/*.asm ${g_prepdir}/*.asm.*); do
      echo "Preprocessing source file.... $i" >>$g_xas99hdr  
      #------------------------------------------------------------------------
      # Preprocess source file. PASS 1
      #------------------------------------------------------------------------
      sed -i -e "s/%%build_date%%/${g_date}/"                     \
             -e "s/%%build_date.length%%/${#g_date}/"             \
             -e "s/%%build_id%%/${g_date}/"                       \
             -e "s/%%build_src%%/${g_list}/"                      \
             -e "s/%%spectra2%%/${g_spectra2}/"                   \
             ${i}

      #------------------------------------------------------------------------
      # Preprocess source file. PASS 2
      #------------------------------------------------------------------------
      awk -f ${g_xas99}.awk -i inplace ${i}
      #view $i                                           # DEBUG
   done   
}


#------------------------------------------------------------------------------
# Function: Preprocess
#------------------------------------------------------------------------------
function preprocess() {


  #------
  # Create preprocessing directory
  #------
  mkdir -p $g_prepdir

  if [[ $? > 0 ]]; then
     echo "Aborting! Could not create preprocessing directory $g_prepdir"
     exit 99
  fi 


  #------
  # Create bin directory if it doesn't exist
  #------
  if [ !  -d "bin" ]; then
     mkdir bin
  fi

  #------
  # Create list directory if it doesn't exist
  #------
  if [ !  -d "list" ]; then
     mkdir list
  fi


  #-------
  # Copy all sources to preprocessing directory
  #-------
  cp $g_source                 ${g_prepdir}/$g_source.$$
  cp ${g_spectra2}/*.asm       ${g_prepdir}/ 
  cp ${g_spectra2}/equates/*   ${g_prepdir}/ 
  cp ${g_spectra2}/modules/*   ${g_prepdir}/ 
  cp ./modules/*               ${g_prepdir}/ 


  #-------
  # Preprocess source code
  #-------
  preproc_source
}

#------------------------------------------------------------------------------
# Function: Assemble source file
#------------------------------------------------------------------------------
function assemble() {
  echo "starting assembly..."
  echo "************************************************" >>$g_xas99hdr
  echo "Assembly started ........ $g_now"                 >>$g_xas99hdr
  echo "Source file ............. $g_source"              >>$g_xas99hdr 
  echo "Assembly run ............ $g_xas99run"            >>$g_xas99hdr
  echo "Preprocessed source ..... $g_preproc"             >>$g_xas99hdr
  echo "ROM cart binary ......... $g_binary"              >>$g_xas99hdr
  echo "List file ............... $g_list"                >>$g_xas99hdr
  echo "Run suffix .............. $g_date"                >>$g_xas99hdr
  echo "************************************************" >>$g_xas99hdr

  xas99.py -q \
           -b $g_preproc     \
           -o bin/$g_binary  \
           -L list/$g_list   \
           -D build_date=$g_date   1>${g_xas99run}    2>&1

  g_asmrc=$?

  if [[ g_asmrc -eq 0 ]]; then
     l_high=$(tail -n1 ${g_list} | cut -f2 -d' ')
     echo "Highest ROM address...... $l_high" >>$g_xas99hdr
  else 
     cat ${g_xas99run}
  fi

  return $g_asmrc
}



#------------------------------------------------------------------------------
# Function: Do Postprocessing
#------------------------------------------------------------------------------
function postprocess() {

  # Get list of binary files
  g_binlist=$(ls -1 $g_binary\_* 2>/dev/null)

  #for f in $g_binlist;
  #do
  #   echo "Stitching binary: $f >> $g_binary" >>$g_xas99run
  #   cat $f >> $g_binary
  #done
  
  #-----------
  # Remove _<6000> file suffix from resulting binary
  #-----------
  g_file=$(ls -1 $g_binary\_* 2>/dev/null)
  if [ "${#g_file}" -gt "0" ] && [ -e "$g_file" ]; then
     mv  $g_file $g_binary
     rm -f $g_file
  fi 
  echo "***** Assembly process returned with RC=$g_asmrc" >>$g_xas99run

  
  #------------
  # Show assembly results
  #------------
  if [[ -e "$g_xas99run" ]]; then 
     filesize=$(stat --printf="%s" "${g_xas99run}")
     if (( $filesize > 0 )); then
        cat $g_xas99hdr $g_xas99run | tee ./xas99.log
     else
        cat $g_xas99hdr | tee ./xas99.log
     fi
     #view ./xas99.log     
  fi

   
  # Preprocess. Stitch ROMS
  source /storage/bitbucket/projects/ti994a/venv/bin/activate
  python3 $g_spasm/mixer.py

  #-----------
  # Cleanup, remove any work files of previous run.
  #-----------
  l_prepdirs="${g_prepdir%.*}*"
  rm -rf ${l_prepdirs}
  rmdir ".${g_basename}"
}

assert              \
   && preprocess    \
   && assemble      \
   && [[ $? == 0 ]] \
   && postprocess
